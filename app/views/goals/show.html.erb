<div id="app" v-cloak >
  
  <h1><%= @goal.goal_name %></h1>
  <% unless @goal.complete? %>
    <countdown :days="days" :hours="hours" :minutes="minutes" :seconds="seconds"></countdown>
    <div v-if="!timeRemains && loaded">
      <h2><span>‚è∞</span> Time's up? Did you complete it? <span>‚è∞</span></h2>
      <div>
        <%= link_to "Change Deadline", edit_goal_path(@goal), class: "btn btn--rounded btn--green" %>
        <%= link_to "Complete Goal", {:controller => "goals", :action => "complete_goal", :id => @goal.id}, class: "btn btn--rounded btn--green" %>
      </div>
    </div>
    <div v-else>
      <% if @random_message.present? %>
        <h2 class="motivationMessage"><%= @random_message.message %></h2>
      <% else %>
        <h2 class="motivationMessage">You got this, fam!</h2>
      <% end %>
      <%= link_to "Complete Goal", {:controller => "goals", :action => "complete_goal", :id => @goal.id}, class: "btn btn--rounded btn--green" %>
    </div>
    
  <% else %>

    <h2>üéâ Congrats, you met your goal {{ name }}!! üéâ</h2>
    <div>
      <%= link_to "Create New Goal", new_goal_path, class: "btn btn--rounded btn--green" %>
    </div>
  
  <% end %>

  <div class="show__nav">
    <%= link_to 'Edit', edit_goal_path(@goal) %> |
    <%= link_to 'All goals', goals_path %>
  </div>

  <!-- Template for countdown partial -->
  <%= render 'countdown_template' %>

</div> <!-- /#app -->

<script>
  Vue.prototype.$http = axios;

  Vue.component('countdown', {
    template: '#countdownTemplate',
    props: ['days', 'hours', 'minutes', 'seconds']
  });

  var app = new Vue({
    el: '#app',
    data: {
      nowSeconds: null,
      offset: new Date().getTimezoneOffset()*60*1000,
      secondsInDay: 86400,
      secondsInHour: 3600,
      deadlineSecs: 0,
      name: "",
      loaded: false,
      url: window.location.href + ".json"
    },
    methods: {
      getNow: function() {
        this.nowSeconds = Date.now() - this.offset;
        setInterval(function(){
          app.nowSeconds = Date.now() - app.offset;
          if (this.secondsLeft <= 0) {
            clearInterval();
          }
        }, 1000);
      },
      randomName: function(names) {
        this.name = names[Math.floor(Math.random() * names.length)];
      }
    },
    computed: {
      secondsLeft: function() {
        var s = Math.round( (this.deadlineSecs - this.nowSeconds) / 1000 );
        return s >= 0 ? s : 0;
      },
      days: function() {
        return Math.floor(this.secondsLeft / this.secondsInDay)
      },
      hours: function() {
        return Math.floor( (this.secondsLeft % this.secondsInDay) / 60 / 60 );
      },
      minutes: function() {
        return Math.floor( (this.secondsLeft % this.secondsInHour ) / 60);
      },
      seconds: function() {
        return Math.floor(this.secondsLeft % 60);
      },
      timeRemains: function() {
        if (this.secondsLeft > 0 && this.nowSeconds !== null) {
          this.loaded = true;
          return true;
        } else {
          setTimeout(function(){
            app.loaded = true;
          }, 500);
          return false;
        }
      }
    },
    mounted: function() {
      this.getNow();
      this.$http.get(this.url)
      .then(function (response) {
        var data = response.data
        var deadline = data.deadline;
        app.deadlineSecs = new Date(deadline).getTime();
        var name = data.name;
        var nickname = data.nickname;
        var names = [name];
        if (nickname !== "") {
          names.push(nickname);
        };
        app.randomName(names);
      })
      .catch(function (error) {
        console.error(error);
      });
    }
  });
</script>