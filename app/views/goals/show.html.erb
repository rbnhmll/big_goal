<div id="app">
  <p>
    <strong>Goal name:</strong>
    <%= @goal.goal_name %>
  </p>

  <p class="dealine">
    <strong>Deadline:</strong>
    <%= @goal.deadline.strftime("%A %B %d %Y at %I:%M%p") %>
  </p>

  <p>
  	<strong>Expires in:</strong>
  	<%= distance_of_time_in_words(Time.now, @goal.deadline) %>
  </p>

  <p>
    <strong>Deadline extended:</strong>
    <%= @goal.deadline_extended %>
  </p>

  <p>
    <strong>Complete:</strong>
    <%= @goal.complete %>
  </p>
  <% if @goal.complete? %>
    <h1>Congrats, you met your goal!!</h1>
  <% else %>
    <div class="countdown">
      <div class="time_block days">
        <span>{{ days }}</span>
        <span>days</span>
      </div>
      <div class="time_block hours">
        <span>{{ hours }}</span>
        <span>hours</span>
      </div>
      <div class="time_block minutes">
        <span>{{ minutes }}</span>
        <span>minutes</span>
      </div>
      <div class="time_block seconds">
        <span>{{ seconds }}</span>
        <span>seconds</span>
      </div>
    </div> <!-- /.countdown -->
    <% end %>
  <% unless @goal.complete? %>
    <%= link_to "Complete Goal", :controller => "goals", :action => "complete_goal", :id => @goal.id %>
  <% end %>

  <%= link_to 'Edit', edit_goal_path(@goal) %> |
  <%= link_to 'Back to Index', goals_path %>

  <h1><%= @random_message.message %></h1>

</div> <!-- /#app -->

<script>
  Vue.component('countdown', {
    template: '<p>Countdown</p>',
    props: {
    }
  });

  var app = new Vue({
    el: '#app',
    data: {
      nowSeconds: "",
      offset: new Date().getTimezoneOffset()*60*1000,
      secondsInDay: 86400,
      secondsInHour: 3600,
      deadlineSecs: 0,
      name: "",
      url: window.location.href + ".json"
    },
    methods: {
      getNow: function() {
        this.nowSeconds = Date.now() - this.offset;
        setInterval(function(){
          app.nowSeconds = Date.now() - app.offset;
          if (this.secondsLeft <= 0) {
            clearInterval();
          }
        }, 1000);
      },
      randomName: function(name, nickname) {
        var names = [name, nickname];
        this.name = names[Math.floor(Math.random() * names.length)];
      }
    },
    computed: {
      secondsLeft: function() {
        var s = Math.round( (this.deadlineSecs - this.nowSeconds) / 1000 );
        return s >= 0 ? s : 0;
      },
      days: function() {
        return Math.floor(this.secondsLeft / this.secondsInDay)
      },
      hours: function() {
        return Math.floor( (this.secondsLeft % this.secondsInDay) / 60 / 60 );
      },
      minutes: function() {
        return Math.floor( (this.secondsLeft % this.secondsInHour ) / 60);
      },
      seconds: function() {
        return Math.floor(this.secondsLeft % 60);
      }
    },
    mounted: function() {
      this.getNow();
      axios.get(this.url)
      .then(function (response) {
        var data = response.data.deadline;
        app.deadlineSecs = new Date(data).getTime();
      })
      .catch(function (error) {
        console.error(error);
      });

      var protocol = window.location.protocol;
      var host = window.location.host;
      var profile_id = <%= current_user.profile.id %>;
      axios.get(`${protocol}//${host}/profiles/${profile_id}.json`)
      .then(function (response) {
        var name = response.data.name;
        var nickname = response.data.nickname;
        app.randomName(name, nickname);
      })
      .catch(function (error) {
        console.error(error);
      });
    }
  });
</script>