<div id="app" v-cloak >
  
  <h1><%= @goal.goal_name %></h1>

  <% if @goal.complete? %>
    <h2>ðŸŽ‰ Congrats, you met your goal {{name}}!!</h2>
  <% else %>
    <div class="countdown">
      <div class="timeBlock days">
        <span class="time">{{ days }}</span>
        <span>days</span>
      </div>
      <div class="timeBlock hours">
        <span class="time">{{ hours }}</span>
        <span>hours</span>
      </div>
      <div class="timeBlock minutes">
        <span class="time">{{ minutes }}</span>
        <span>minutes</span>
      </div>
      <div class="timeBlock seconds">
        <span class="time">{{ seconds }}</span>
        <span>seconds</span>
      </div>
    </div> <!-- /.countdown -->
    <% end %>
  <% unless @goal.complete? %>
    <%= link_to "Complete Goal", {:controller => "goals", :action => "complete_goal", :id => @goal.id}, class: "btn" %>
    
    <% if @random_message.present? %>
      <h2 class=""><%= @random_message.message %></h2>
    <% else %>
      <h1>You got this, fam!</h1>
    <% end %>
  <% end %>

  <%= link_to 'Edit', edit_goal_path(@goal) %> |
  <%= link_to 'Back to Index', goals_path %>
  

</div> <!-- /#app -->

<script>
  Vue.prototype.$http = axios;

  Vue.component('countdown', {
    template: '<p>Countdown</p>',
    props: {
    }
  });

  var app = new Vue({
    el: '#app',
    data: {
      nowSeconds: "",
      offset: new Date().getTimezoneOffset()*60*1000,
      secondsInDay: 86400,
      secondsInHour: 3600,
      deadlineSecs: 0,
      name: "",
      url: window.location.href + ".json"
    },
    methods: {
      getNow: function() {
        this.nowSeconds = Date.now() - this.offset;
        setInterval(function(){
          app.nowSeconds = Date.now() - app.offset;
          if (this.secondsLeft <= 0) {
            clearInterval();
          }
        }, 1000);
      },
      randomName: function(names) {
        this.name = names[Math.floor(Math.random() * names.length)];
      }
    },
    computed: {
      secondsLeft: function() {
        var s = Math.round( (this.deadlineSecs - this.nowSeconds) / 1000 );
        return s >= 0 ? s : 0;
      },
      days: function() {
        return Math.floor(this.secondsLeft / this.secondsInDay)
      },
      hours: function() {
        return Math.floor( (this.secondsLeft % this.secondsInDay) / 60 / 60 );
      },
      minutes: function() {
        return Math.floor( (this.secondsLeft % this.secondsInHour ) / 60);
      },
      seconds: function() {
        return Math.floor(this.secondsLeft % 60);
      }
    },
    mounted: function() {
      this.getNow();
      this.$http.get(this.url)
      .then(function (response) {
        var data = response.data.deadline;
        app.deadlineSecs = new Date(data).getTime();
      })
      .catch(function (error) {
        console.error(error);
      });

      var protocol = window.location.protocol;
      var host = window.location.host;
      var profile_id = <%= current_user.profile.id %>;
      this.$http.get(`${protocol}//${host}/profiles/${profile_id}.json`)
      .then(function (response) {
        var name = response.data.name;
        var nickname = response.data.nickname;
        var names = [name];
        if (nickname !== "") {
          names.push(nickname);
        }
        app.randomName(names);
      })
      .catch(function (error) {
        console.error(error);
      });
    }
  });
</script>